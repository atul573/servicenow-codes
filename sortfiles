(function() {
    // Define a list of file names
    var fileNames = [
        "SPECTRUM_SNRainbow_ChildEquipments_202406250106_33_00000001.csv",
        "SPECTRUM_SNRainbow_ChildEquipments_202406250106_33_00000002.csv",
        "SPECTRUM_SNRainbow_ChildEquipments_202406250106_33_00000003.csv",
        "SPECTRUM_SNRainbow_ChildEquipments_202406250106_33_00000004.csv",
        "SPECTRUM_SNRainbow_ChildEquipments_202406250106_33_00000005.csv",
        "SPECTRUM_SNRainbow_Equipments_202406250106_3_00000001.csv",
        "SPECTRUM_SNRainbow_Equipments_202406250106_3_00000002.csv",
        "SPECTRUM_SNRainbow_Equipments_202406250106_3_00000003.csv"
    ];

    // Function to extract and return sorting key
    function extractSortKey(fileName) {
        var match = fileName.match(/(\d+)_([\d]+)\.csv$/);
        return match ? match[1] + match[2] : "";
    }

    // Sort the filenames
    fileNames.sort(function(a, b) {
        var aIsChild = a.includes("ChildEquipments");
        var bIsChild = b.includes("ChildEquipments");

        // Prioritize 'Equipments' before 'ChildEquipments'
        if (aIsChild && !bIsChild) return 1;
        if (!aIsChild && bIsChild) return -1;

        // If both are either 'Equipments' or 'ChildEquipments', sort by numeric key
        var aKey = extractSortKey(a);
        var bKey = extractSortKey(b);

        return aKey.localeCompare(bKey, undefined, { numeric: true });
    });

    // Print sorted filenames
    fileNames.forEach(function(fileName) {
        gs.info(fileName);
    });
})();







function sortFileNames(fileNames) {
    // Function to extract and return sorting key
    function extractSortKey(fileName) {
        var match = fileName.match(/(\d+)_([\d]+)\.csv$/);
        return match ? match[1] + match[2] : "";
    }

    // Sort the filenames
    fileNames.sort(function(a, b) {
        var aIsChild = a.includes("ChildEquipments");
        var bIsChild = b.includes("ChildEquipments");

        // Prioritize 'Equipments' before 'ChildEquipments'
        if (aIsChild && !bIsChild) return 1;
        if (!aIsChild && bIsChild) return -1;

        // If both are either 'Equipments' or 'ChildEquipments', sort by numeric key
        var aKey = extractSortKey(a);
        var bKey = extractSortKey(b);

        return aKey.localeCompare(bKey, undefined, { numeric: true });
    });

    return fileNames;
}

// Example usage
var fileNames = [
    "SPECTRUM_SNRainbow_ChildEquipments_202406250106_33_00000001.csv",
    "SPECTRUM_SNRainbow_ChildEquipments_202406250106_33_00000002.csv",
    "SPECTRUM_SNRainbow_ChildEquipments_202406250106_33_00000003.csv",
    "SPECTRUM_SNRainbow_ChildEquipments_202406250106_33_00000004.csv",
    "SPECTRUM_SNRainbow_ChildEquipments_202406250106_33_00000005.csv",
    "SPECTRUM_SNRainbow_Equipments_202406250106_3_00000001.csv",
    "SPECTRUM_SNRainbow_Equipments_202406250106_3_00000002.csv",
    "SPECTRUM_SNRainbow_Equipments_202406250106_3_00000003.csv"
];

var sortedFileNames = sortFileNames(fileNames);
console.log(sortedFileNames);



function waitForResponse(agent, source) {
    var startTime = new GlideDateTime();
    var maxWaitTime = 60000; // 60 seconds
    var waitInterval = 5000; // 5 seconds

    while (new GlideDateTime().getNumericValue() - startTime.getNumericValue() < maxWaitTime) {
        var eccResponse = new GlideRecord('ecc_queue');
        eccResponse.addQuery('agent', agent);
        eccResponse.addQuery('source', source);
        eccResponse.addQuery('queue', 'input');
        eccResponse.addQuery('state', 'ready');
        eccResponse.orderByDesc('sys_created_on');
        eccResponse.query();

        if (eccResponse.next()) {
            // Process the response
            var responsePayload = eccResponse.payload;
            // Handle the response payload
            return responsePayload;
        }

        gs.sleep(waitInterval); // Wait for the interval before checking again
    }

    gs.error('Timeout waiting for ECC queue response');
    return null;
}






